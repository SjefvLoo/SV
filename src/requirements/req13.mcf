% Measurement only takes place when a non-closing wafer is at Meas.
% Depends on aux1.

% C represents the set of positions where the closing wafers are located
(nu X(C: Set(Position) = {ChuckMeas, ChuckProj}).
    % Maintain C
    (forall p:RobotPositionT.
        % Prune the robot x positions options that are not allowed
        val(p in allowed)  => (
            [RMoveFromTo(robot(p),from(p),to(p))](
                val(from(p) in C) => X(C-{from(p)}+{to(p)})
            )
            &&
            [RMoveFromTo(robot(p),from(p),to(p))](
                val(!(from(p) in C)) => X(C)
            )
        )
    )
    &&
    (val(ChuckMeas in C && ChuckProj in C) => [Swap]X(C)) &&
    (val(!(ChuckMeas in C) && !(ChuckProj in C)) => [Swap]X(C)) &&
    (val(!(ChuckMeas in C) && ChuckProj in C) => 
        [Swap]X(C-{ChuckProj}+{ChuckMeas})) &&
    (val(ChuckMeas in C && !(ChuckProj in C)) => 
        [Swap]X(C-{ChuckMeas}+{ChuckProj})) &&
    [(
        % Prune the robot x positions options that are not allowed
        (forall p:RobotPositionT. 
            val(p in allowed)  => !RMoveFromTo(robot(p),from(p),to(p))) &&
        !Swap
    )]X(C) &&
    
    % Use C
    [MeasureWafer]val(!(ChuckMeas in C))
)

&&

% W contains all the positions on which a wafer currently is placed.
% Initially there are only wafers on ChuckMeas and ChuckProj
(nu X(W : Set(Position) = {ChuckMeas, ChuckProj}).
    % Maintain W
    forall p:RobotPositionT.
        % Prune the robot x positions options that are not allowed
        val(p in allowed) => (
            [RMoveFromTo(robot(p),from(p),to(p))](X(W-{from(p)}))
            &&
            [RIdle(robot(p), from(p),to(p))](X(W+{to(p)}))
        ) &&
    [(
        forall p:RobotPositionT.
        val(p in allowed) => (
            !RMoveFromTo(robot(p), from(p), to(p)) 
            &&
            !RIdle(robot(p), from(p), to(p))
        )
    )]X(W) &&

    % Use w
    [MeasureWafer]val(ChuckMeas in W)
)