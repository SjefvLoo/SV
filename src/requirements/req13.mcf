% Measurement only takes place when a non-closing wafer is at Meas.
% Depends on aux1.

(nu X(C: Set(Position) = {ChuckMeas, ChuckProj}).
    (forall p:RobotPositionT.
        % Prune the robot x positions options that are not allowed
        val(p in allowed)  => (
            [RMoveFromTo(robot(p),from(p),to(p))](
                val(from(p) in C) => X(C-{from(p)}+{to(p)})
            )
            &&
            [RMoveFromTo(robot(p),from(p),to(p))](
                val(!(from(p) in C)) => X(C)
            )
        )
    )
    &&
    (val(ChuckMeas in C && ChuckProj in C) => [Swap]X(C)) &&
    (val(!(ChuckMeas in C) && !(ChuckProj in C)) => [Swap]X(C)) &&
    (val(!(ChuckMeas in C) && ChuckProj in C) => 
        [Swap]X(C-{ChuckProj}+{ChuckMeas})) &&
    (val(ChuckMeas in C && !(ChuckProj in C)) => 
        [Swap]X(C-{ChuckMeas}+{ChuckProj})) &&
    [(
        % Prune the robot x positions options that are not allowed
        (forall p:RobotPositionT. 
            val(p in allowed)  => !RMoveFromTo(robot(p),from(p),to(p))) &&
        !Swap
    )]X(C) &&
    [MeasureWafer]val(!(ChuckMeas in C))
)

&&

(nu X(w : Position -> Bool = (lambda p:Position. false)
                                [ChuckMeas -> true]
                                [ChuckProj -> true]).
    (forall p:RobotPositionT.
        % Prune the robot x positions options that are not allowed
        val(p in allowed) => (
            [RMoveFromTo(robot(p),from(p),to(p))](X(w[from(p) -> false]))
            &&
            [RIdle(robot(p), from(p),to(p))](X(w[to(p) -> true]))
        ) &&
        [(
            forall p:RobotPositionT.
            val(p in allowed) => (
                !RMoveFromTo(robot(p), from(p), to(p)) 
                &&
                !RIdle(robot(p), from(p), to(p))
            )
        )]X(w) &&
        [MeasureWafer]val(w(ChuckMeas))
    )
)