sort
    Position = struct Tray | ChuckIn | ChuckOut | ChuckMeas | ChuckProj
        | ChuckEmptyOne | ChuckEmptyTwo;
    Recipe = struct RecipeOne | RecipeTwo | RecipeThree;
    Robot = struct RobotOne | RobotTwo | RobotThree;
    ChuckStatus = struct Empty | Wafer | Processed | Notifying;

act
    % Lot Controller to Machine
    RMoveFromTo: Robot # Position # Position;
    Calibrate;
    PreMeasureWafer;
    MeasureWafer;
    ProjectWafer;
    Swap;

    % Machine to Lot Controller
    ProvideLotInfo: Nat # Recipe # Bool;
    RIdle: Robot # Position # Position;
    SwapIdle;
    PreMeasured;
    Measured;
    Projected;
    Calibrated;

    % Lot Controller to User
    Finished;

    % Communication between MainComponent and IOComponent
    AvailableWafers: Nat;
        rAvailableWafers: Nat;
        sAvailableWafers: Nat;
    CompletedLot;
        rCompletedLot;
        sCompletedLot;

    % Communication between IOComponent and ProjectComponent
    WaferReadyAtChuckIn;
        rWaferReadyAtChuckIn;
        sWaferReadyAtChuckIn;
    WaferTakenAtChuckIn;
        rWaferTakenAtChuckIn;
        sWaferTakenAtChuckIn;
    WaferReadyAtChuckOut;
        rWaferReadyAtChuckOut;
        sWaferReadyAtChuckOut;
    WaferTakenAtChuckOut;
        rWaferTakenAtChuckOut;
        sWaferTakenAtChuckOut;

    % Communication between MainComponent and ProjectComponent
    ChangeConfig: Recipe # Bool;
        rChangeConfig: Recipe # Bool;
        sChangeConfig: Recipe # Bool;
    ChangedConfig;
        rChangedConfig;
        sChangedConfig;

    % Communication between ProjectComponent and EmptyComponent
    ProvideClosingWafer;
        rProvideClosingWafer;
        sProvideClosingWafer;
    ProvidedClosingWafer;
        rProvidedClosingWafer;
        sProvidedClosingWafer;
    StoreClosingWafer;
        rStoreClosingWafer;
        sStoreClosingWafer;
    StoredClosingWafer;
        rStoredClosingWafer;
        sStoredClosingWafer;

    % Communication between MainComponent and TrayInput
    % ProvideLotInfo is from Machine to LotController
        rProvideLotInfo: Nat # Recipe # Bool;
        sProvideLotInfo: Nat # Recipe # Bool;
    TrayDone;
        sTrayDone, rTrayDone;

proc
    MainComponent(wafers:Nat, currentRecipe:Recipe, calibrateNow: Bool) =
        ((wafers==0 && !calibrateNow) -> (
            (sum n:Nat. sum r:Recipe. sum c:Bool. (rProvideLotInfo(n, r, c) . MainComponent(n, r, c))) +
            rTrayDone . Finished
        )) +
        ((wafers>0 && !calibrateNow) -> (
            (sAvailableWafers(wafers) . MainComponent(wafers, currentRecipe, calibrateNow)) +
            rCompletedLot . MainComponent(0, currentRecipe, false)
        ));


    IOComponent(idle: Bool, wtake: Nat, wplace: Nat, cin:ChuckStatus, cout:ChuckStatus) =
        ((idle) -> sum n:Nat. rAvailableWafers(n) . IOComponent((n==0), n, n, cin, cout)) +
        ((!idle && wplace == 0) -> sCompletedLot . IOComponent(true, wtake, wplace, cin, cout)) +
        (!idle) -> (
            ((cin == Empty && wtake > 0) -> RMoveFromTo(RobotOne, Tray, ChuckIn) . RIdle(RobotOne, Tray, ChuckIn) . IOComponent(idle, Int2Nat(wtake -1), wplace, Wafer, cout)) +
            ((cin == Wafer) -> PreMeasureWafer . PreMeasured . IOComponent(idle, wtake, wplace, Processed, cout)) +
            ((cin == Processed) -> sWaferReadyAtChuckIn . IOComponent(idle, wtake, wplace, Notifying, cout)) +
            ((cin == Notifying) -> rWaferTakenAtChuckIn . IOComponent(idle, wtake, wplace, Empty, cout)) +

            ((cout == Wafer && wplace > 0) -> RMoveFromTo(RobotOne, ChuckOut, Tray) . RIdle(RobotOne, ChuckOut, Tray) . IOComponent(idle, wtake, wplace, cin, Notifying)) +
            ((cout == Empty) -> rWaferReadyAtChuckOut . IOComponent(idle, wtake, wplace, cin, Wafer)) +
            ((cout == Notifying) -> sWaferTakenAtChuckOut . IOComponent(idle, wtake, Int2Nat(wplace - 1), cin, Empty))
        )
        ;

    % Assumption: Only valid requests
    EmptyComponent(oneWafer: Bool) = (
            rProvideClosingWafer
            .(oneWafer
                -> RMoveFromTo(RobotTwo, ChuckEmptyOne, ChuckMeas)
                    .RIdle(RobotTwo, ChuckEmptyOne, ChuckMeas)
                <> RMoveFromTo(RobotThree, ChuckEmptyTwo, ChuckMeas)
                    .RIdle(RobotThree, ChuckEmptyTwo, ChuckMeas)
            )
            .sProvidedClosingWafer
            +
            rStoreClosingWafer
            .(!oneWafer
                -> RMoveFromTo(RobotTwo, ChuckMeas, ChuckEmptyOne)
                    .RIdle(RobotTwo, ChuckMeas, ChuckEmptyOne)
                <> RMoveFromTo(RobotThree, ChuckMeas, ChuckEmptyTwo)
                    .RIdle(RobotThree, ChuckMeas, ChuckEmptyTwo)
            )
            .sStoredClosingWafer
        )
        .EmptyComponent(!oneWafer)
        ;

    ProjectComponent(
            config: Recipe, chuckAAtProj: Bool, measEmpty: Bool,
            calibrate: Bool) =
        (calibrate
            -> (measEmpty
                -> sProvideClosingWafer
                    .rProvideClosingWafer
                    .Calibrate
                    .Calibrated
                    .ProjectComponent(config, chuckAAtProj, measEmpty, false)
            )
            <> (
                (sum toCalibrate:Bool
                    .rChangeConfig(RecipeOne, toCalibrate)
                    .(chuckAAtProj
                        -> (measEmpty
                            -> sProvideClosingWafer
                                .rProvidedClosingWafer
                        )
                        .Swap
                        .SwapIdle
                    )
                    .sStoreClosingWafer
                    .rStoredClosingWafer
                    .ProjectComponent(
                        RecipeOne, false, measEmpty, toCalibrate)
                 )
                 + (sum toCalibrate:Bool
                    .rChangeConfig(RecipeTwo, toCalibrate)
                    .(!chuckAAtProj
                        -> (measEmpty
                            -> sProvideClosingWafer
                                .rProvidedClosingWafer
                        )
                        .Swap
                        .SwapIdle
                    )
                    .sStoreClosingWafer
                    .rStoredClosingWafer
                    .ProjectComponent(
                        RecipeTwo, true, measEmpty, toCalibrate)
                )
                + (sum toCalibrate:Bool
                    .rChangeConfig(RecipeThree, toCalibrate)
                    .(!measEmpty
                        -> sStoreClosingWafer
                            .rStoredClosingWafer
                    )
                    .ProjectComponent(
                        RecipeThree, chuckAAtProj, measEmpty, toCalibrate)
                )
                + rWaferReadyAtChuckIn
                .RMoveFromTo(RobotTwo, ChuckIn, ChuckMeas)
                .RIdle(RobotTwo, ChuckIn, ChuckMeas)
                .sWaferTakenAtChuckIn
                .MeasureWafer
                .Measured
                .Swap
                .SwapIdle
                .ProjectWafer
                .Projected
                .Swap
                .SwapIdle
                .RMoveFromTo(RobotThree, ChuckMeas, ChuckOut)
                .RIdle(RobotTwo, ChuckMeas, ChuckOut)
                .sWaferReadyAtChuckOut
                .rWaferTakenAtChuckOut
            )
        )
        ;


    TrayInput = sProvideLotInfo(5, RecipeOne, false)
        .sProvideLotInfo(7, RecipeTwo, false)
        .sProvideLotInfo(11, RecipeThree, false)
        .sTrayDone
        ;

init
    hide({
%        AvailableWafers,
%        CompletedLot,
%        WaferReadyAtChuckIn,
%        WaferReadyAtChuckOut,
%        Calibrated,
         ChangeConfig
    },
    allow({
        RMoveFromTo,
        Calibrate,
        PreMeasureWafer,
        MeasureWafer,
        ProjectWafer,
        Swap,
        ProvideLotInfo,
        RIdle,
        SwapIdle,
        PreMeasured,
        Measured,
        Projected,
        Calibrated,
        Finished,
        AvailableWafers,
        CompletedLot,
        WaferTakenAtChuckIn,
        WaferReadyAtChuckIn,
        WaferTakenAtChuckOut,
        WaferReadyAtChuckOut,
        ChangeConfig,
        TrayDone
    },
    comm({
        sTrayDone             | rTrayDone             -> TrayDone,
        rAvailableWafers      | sAvailableWafers      -> AvailableWafers,
        rCompletedLot         | sCompletedLot         -> CompletedLot,
        rWaferTakenAtChuckIn  | sWaferTakenAtChuckIn  -> WaferTakenAtChuckIn,
        rWaferTakenAtChuckOut | sWaferTakenAtChuckOut -> WaferTakenAtChuckOut,
        rWaferReadyAtChuckIn  | sWaferReadyAtChuckIn  -> WaferReadyAtChuckIn,
        rWaferReadyAtChuckOut | sWaferReadyAtChuckOut -> WaferReadyAtChuckOut,
        rChangeConfig         | sChangeConfig         -> ChangeConfig,
        rChangedConfig        | sChangedConfig        -> ChangedConfig,
        rProvideLotInfo       | sProvideLotInfo       -> ProvideLotInfo,
        rProvideClosingWafer  | sProvideClosingWafer  -> ProvideClosingWafer,
        rProvidedClosingWafer | sProvidedClosingWafer -> ProvidedClosingWafer,
        rStoreClosingWafer    | sStoreClosingWafer    -> StoreClosingWafer,
        rStoredClosingWafer   | sStoredClosingWafer   -> StoredClosingWafer
    },
    MainComponent(0,RecipeOne,false)
        || IOComponent(true, 0, 0, Empty, Empty)
        || EmptyComponent(false)
        || ProjectComponent(RecipeThree, false, false, false)
        || TrayInput
)));
